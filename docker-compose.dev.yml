x-common-env: &common-env
  environment:
    BRIEFEX_CRAWLER__REQ_TIMEOUT: ${BRIEFEX_CRAWLER__REQ_TIMEOUT}
    BRIEFEX_CRAWLER__POOL_CONN: ${BRIEFEX_CRAWLER__POOL_CONN}
    BRIEFEX_CRAWLER__POOL_MAX_SIZE: ${BRIEFEX_CRAWLER__POOL_MAX_SIZE}
    BRIEFEX_CRAWLER__MAX_RETRIES: ${BRIEFEX_CRAWLER__MAX_RETRIES}
    BRIEFEX_CRAWLER__RETRY_DELAY: ${BRIEFEX_CRAWLER__RETRY_DELAY}
    BRIEFEX_CRAWLER__MAX_RETRY_DELAY: ${BRIEFEX_CRAWLER__MAX_RETRY_DELAY}
    BRIEFEX_CRAWLER__LOOKBACK_DAYS: ${BRIEFEX_CRAWLER__LOOKBACK_DAYS}

    BRIEFEX_INTELLIGENCE__SUMMARIZATION_PROMPT: ${BRIEFEX_INTELLIGENCE__SUMMARIZATION_PROMPT}
    BRIEFEX_INTELLIGENCE__SUMMARIZATION_MODEL: ${BRIEFEX_INTELLIGENCE__SUMMARIZATION_MODEL}
    BRIEFEX_INTELLIGENCE__SUMMARIZATION_TEMPERATURE: ${BRIEFEX_INTELLIGENCE__SUMMARIZATION_TEMPERATURE}
    BRIEFEX_INTELLIGENCE__SUMMARIZATION_MAX_TOKENS: ${BRIEFEX_INTELLIGENCE__SUMMARIZATION_MAX_TOKENS}
    BRIEFEX_INTELLIGENCE__SUMMARIZATION_TOP_P: ${BRIEFEX_INTELLIGENCE__SUMMARIZATION_TOP_P}

    BRIEFEX_LLM__GIGACHAT_CLIENT_ID: ${BRIEFEX_LLM__GIGACHAT_CLIENT_ID}
    BRIEFEX_LLM__GIGACHAT_CLIENT_SECRET: ${BRIEFEX_LLM__GIGACHAT_CLIENT_SECRET}
    BRIEFEX_LLM__GIGACHAT_AUTH_KEY: ${BRIEFEX_LLM__GIGACHAT_AUTH_KEY}
    BRIEFEX_LLM__GIGACHAT_MODEL: ${BRIEFEX_LLM__GIGACHAT_MODEL}
    BRIEFEX_LLM__GIGACHAT_SCOPE: ${BRIEFEX_LLM__GIGACHAT_SCOPE}
    BRIEFEX_LLM__GIGACHAT_VERIFY_SSL_CERTS: ${BRIEFEX_LLM__GIGACHAT_VERIFY_SSL_CERTS}

    BRIEFEX_LLM__YANDEX_GPT_FOLDER_ID: ${BRIEFEX_LLM__YANDEX_GPT_FOLDER_ID}
    BRIEFEX_LLM__YANDEX_GPT_API_KEY: ${BRIEFEX_LLM__YANDEX_GPT_API_KEY}

    BRIEFEX_SQLALCHEMY__URL: ${BRIEFEX_SQLALCHEMY__URL}
    BRIEFEX_SQLALCHEMY__ECHO: ${BRIEFEX_SQLALCHEMY__ECHO}
    BRIEFEX_SQLALCHEMY__AUTOFLUSH: ${BRIEFEX_SQLALCHEMY__AUTOFLUSH}
    BRIEFEX_SQLALCHEMY__EXPIRE_ON_COMMIT: ${BRIEFEX_SQLALCHEMY__EXPIRE_ON_COMMIT}

    BRIEFEX_CELERY__APP: ${BRIEFEX_CELERY__APP}
    BRIEFEX_CELERY__BROKER_URL: ${BRIEFEX_CELERY__BROKER_URL}
    BRIEFEX_CELERY__RESULT_BACKEND: ${BRIEFEX_CELERY__RESULT_BACKEND}
    BRIEFEX_CELERY__TASK_SERIALIZER: ${BRIEFEX_CELERY__TASK_SERIALIZER}
    BRIEFEX_CELERY__RESULT_SERIALIZER: ${BRIEFEX_CELERY__RESULT_SERIALIZER}
    BRIEFEX_CELERY__ACCEPT_CONTENT: ${BRIEFEX_CELERY__ACCEPT_CONTENT}
    BRIEFEX_CELERY__TIMEZONE: ${BRIEFEX_CELERY__TIMEZONE}
    BRIEFEX_CELERY__ENABLE_UTC: ${BRIEFEX_CELERY__ENABLE_UTC}
    BRIEFEX_CELERY__WORKER_HIJACK_ROOT_LOGGER: ${BRIEFEX_CELERY__WORKER_HIJACK_ROOT_LOGGER}

    BRIEFEX_FLOWER__USER: ${BRIEFEX_FLOWER__USER}
    BRIEFEX_FLOWER__PASSWORD: ${BRIEFEX_FLOWER__PASSWORD}

    PYTHONPATH: /app/src

x-common-logging: &common-logging
  logging:
    driver: "local"
    options:
      max-size: "10m"
      max-file: "3"

networks:
  internal:
    internal: true
  admin: { }
  public: { }

volumes:
  db_data:
  redis_data:

services:
  db:
    image: postgres:16
    restart: always
    <<: *common-logging
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5434:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [ admin, internal ]

  redis:
    image: redis:7-alpine
    restart: always
    <<: *common-logging
    command: [ "redis-server", "--appendonly", "yes", "--appendfsync", "everysec" ]
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 10
    networks: [ internal ]

  celery_worker:
    build: .
    restart: always
    <<: [ *common-env, *common-logging ]
    init: true
    command: >
      celery -A ${BRIEFEX_CELERY__APP} worker
      --loglevel="INFO"
      --concurrency=1
      --prefetch-multiplier=1
      --hostname=worker@%h
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
    networks: [ internal, public ]
    stop_grace_period: 30s
    healthcheck:
      test: [ "CMD-SHELL",
              "celery -A \"$${BRIEFEX_CELERY__APP}\" inspect ping -d celery@$$(hostname) || celery -A \"$${BRIEFEX_CELERY__APP}\" inspect ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

  celery_beat:
    build: .
    restart: always
    <<: [ *common-env, *common-logging ]
    init: true
    command: >
      sh -lc 'celery -A ${BRIEFEX_CELERY__APP} beat
      --loglevel=INFO
      --schedule=/tmp/celerybeat-schedule'
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
    networks: [ internal ]
    stop_grace_period: 30s
    healthcheck:
      test: [ "CMD-SHELL",
              "celery -A \"$${BRIEFEX_CELERY__APP}\" beat --help >/dev/null 2>&1" ]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 20s

  flower:
    build: .
    restart: always
    <<: [ *common-env, *common-logging ]
    command: >
      celery -A ${BRIEFEX_CELERY__APP} flower
      --port=5555
      --basic-auth=${BRIEFEX_FLOWER__USER}:${BRIEFEX_FLOWER__PASSWORD}
    ports:
      - "127.0.0.1:5555:5555"
    depends_on:
      redis:
        condition: service_healthy
    networks: [ admin, internal ]
